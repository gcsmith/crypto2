Garrett Smith
Cryptography 2
Homework #2 - Part I

1
--------------------------------------------------------------------------------

The program hw2_part1 implements the 'compute_Zpk' routine which calculates the
order of each element in Zp* and identifies and displays each primitive element.
The relevant portion of the output of this program is listed below:

p = 131
k = 1
n = 130

printing orders of each element (0 ... 130):
      1   1 130  65  65  65 130  65 130  65 130  65  65  65 130  65  65 130  26  26
     65  65 130 130  26  65 130  65  65 130 130 130  26  65  65  65  65 130  65  13
    130  65  10  65  65  13  65  26  65  65 130  26  13   5 130  65 130 130   5  65
     13   5  13  13  65  65 130 130  26  26  10  26 130  10  65  65 130  65  10  26
     13  65 130 130  13 130  26 130 130   5 130  65  26 130  65 130 130 130 130  13
     65  65  65 130 130  65 130  13  65  65 130 130  13  13  65 130 130  65 130 130
    130  65 130  65 130  65 130 130 130  65   2 
printing primitive elements:
      2   6   8  10  14  17  22  23  26  29  30  31  37  40  50  54  56  57  66  67
     72  76  82  83  85  87  88  90  93  95  96  97  98 103 104 106 110 111 115 116
    118 119 120 122 124 126 127 128 
printing powers of primitive element 2 (2^0 ... 2^130):
      1   2   4   8  16  32  64 128 125 119 107  83  35  70   9  18  36  72  13  26
     52 104  77  23  46  92  53 106  81  31  62 124 117 103  75  19  38  76  21  42
     84  37  74  17  34  68   5  10  20  40  80  29  58 116 101  71  11  22  44  88
     45  90  49  98  65 130 129 127 123 115  99  67   3   6  12  24  48  96  61 122
    113  95  59 118 105  79  27  54 108  85  39  78  25  50 100  69   7  14  28  56
    112  93  55 110  89  47  94  57 114  97  63 126 121 111  91  51 102  73  15  30
     60 120 109  87  43  86  41  82  33  66   1 
printing number of elements in each order ...
    order[1] -> 2
    order[2] -> 1
    order[5] -> 4
    order[10] -> 4
    order[13] -> 12
    order[26] -> 12
    order[65] -> 48
    order[130] -> 48

* number of primitive elements matches phi(phi(131)) = phi(130) = 48.

2
--------------------------------------------------------------------------------

The 'compute_Zpk' routine from hw2_part1 was used again with p=131, k=2. The
relevant portion of the program output is listed below

p = 131
k = 2
n = 17030

printing primitive elements:
      2   6   8  10  14  17  22  23  26  29  30  31  37  40  50 ( ... )

( ... )

printing number of elements in each order ...
    order[1] -> 2
    order[2] -> 1
    order[5] -> 4
    order[10] -> 4
    order[13] -> 12
    order[26] -> 12
    order[65] -> 48
    order[130] -> 48
    order[131] -> 130
    order[262] -> 130
    order[655] -> 520
    order[1310] -> 520
    order[1703] -> 1560
    order[3406] -> 1560
    order[8515] -> 6240
    order[17030] -> 6240
    order[17161] -> 130

* number of primitive elements matches phi(phi(131^2)) = phi(17030) = 6240

The routine 'pohlig_hellman' was developed to implement the Pohlig-Hellman
algorithm for computing discrete logarithms. The prime factorization of n
was first done by hand:

n = p*(p-1) = 17030 = 2*5*13*131

Then pohlig_hellman was called for each value pi (using primitive 2 as base):

[ n=17030 alpha=2 beta=103 q=2 c=1 ]  ->  { 8697 }  ->  8697
[ n=17030 alpha=2 beta=103 q=5 c=1 ]  ->  { 10518 }  ->  10518
[ n=17030 alpha=2 beta=103 q=13 c=1 ]  ->  { 8561 }  ->  8561
[ n=17030 alpha=2 beta=103 q=131 c=1 ]  ->  { 11836 }  ->  11836
a=15373 beta=103

this yields the following system of equations:

x =  8697 mod 2
x = 10518 mod 5
x =  8561 mod 13
x = 11836 mod 131

solving for x using the Chinese Remainder Theorem yields:

x = 15373

verifying this with shanks yields 15373 as well, and computing:

2 ^ 15373 mod 17161 = 103

where beta=103 is the correct result.

3
--------------------------------------------------------------------------------

*** irreducibility of x^2 + 1 ***

Test (x^2 + 1) for irreducibility using naive approach of dividing by each
lower order monic polynomial:

(x^2 + 1) / (x)     = x rem 1
(x^2 + 1) / (x + 1) = (x + 130) rem 2

Therefore, (x^2 + 1) is irreducible in Z131[x].

*** implementation details ***

The program 'hw2_part1' was written that implements a naive algorithm to
determine the orders of each element in GF(131^2), and displays each monic
primitive polynomial (using a similar method to the first two questions).

The utility class 'gf2_p' (located in gf2_p.h) represents a polynomial in this
field and implements the basic operations required for implementing Shank's
algorithm (addition, multiplication, brute force inversion, and exponentiation).

The routine 'shanks_gf' implements shanks algorithm in GF(131^2). It functions
in a similar manner to the 'shanks' routine used for Zp, operating on
polynomials rather than integers.

*** general properties ***

GF(p^2) mod (x^2 + 1) -> Zp[x] / (x^2 + 1)

Order( GF(131^2) ) = (131^2 - 1) = 17,160
Elements: 0, 1, x, x+1

ADD: (a1, b1) + (a2, b2) = (a1 + a2 mod 131, b1 + b2 mod 131)
MUL: (a1, b1) * (a2, b2) = (a1*b2 + a2*b1 mod 131, b1*b2 - a1*a2 mod 131)

*** solution ***

shanks(1x + 3, 1x + 101) = 3517
test: 1x + 101
